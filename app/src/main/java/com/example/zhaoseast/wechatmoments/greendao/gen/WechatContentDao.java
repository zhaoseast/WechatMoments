package com.example.zhaoseast.wechatmoments.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zhaoseast.wechatmoments.bean.WechatContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WECHAT_CONTENT".
*/
public class WechatContentDao extends AbstractDao<WechatContent, String> {

    public static final String TABLENAME = "WECHAT_CONTENT";

    /**
     * Properties of entity WechatContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Senderid = new Property(1, String.class, "senderid", false, "SENDERID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Likenumber = new Property(3, String.class, "likenumber", false, "LIKENUMBER");
        public final static Property Commentsnumber = new Property(4, String.class, "commentsnumber", false, "COMMENTSNUMBER");
        public final static Property Creationdate = new Property(5, String.class, "creationdate", false, "CREATIONDATE");
        public final static Property Creationaddress = new Property(6, String.class, "creationaddress", false, "CREATIONADDRESS");
    }


    public WechatContentDao(DaoConfig config) {
        super(config);
    }
    
    public WechatContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WECHAT_CONTENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SENDERID\" TEXT," + // 1: senderid
                "\"TITLE\" TEXT," + // 2: title
                "\"LIKENUMBER\" TEXT," + // 3: likenumber
                "\"COMMENTSNUMBER\" TEXT," + // 4: commentsnumber
                "\"CREATIONDATE\" TEXT," + // 5: creationdate
                "\"CREATIONADDRESS\" TEXT);"); // 6: creationaddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WECHAT_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WechatContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String senderid = entity.getSenderid();
        if (senderid != null) {
            stmt.bindString(2, senderid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String likenumber = entity.getLikenumber();
        if (likenumber != null) {
            stmt.bindString(4, likenumber);
        }
 
        String commentsnumber = entity.getCommentsnumber();
        if (commentsnumber != null) {
            stmt.bindString(5, commentsnumber);
        }
 
        String creationdate = entity.getCreationdate();
        if (creationdate != null) {
            stmt.bindString(6, creationdate);
        }
 
        String creationaddress = entity.getCreationaddress();
        if (creationaddress != null) {
            stmt.bindString(7, creationaddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WechatContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String senderid = entity.getSenderid();
        if (senderid != null) {
            stmt.bindString(2, senderid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String likenumber = entity.getLikenumber();
        if (likenumber != null) {
            stmt.bindString(4, likenumber);
        }
 
        String commentsnumber = entity.getCommentsnumber();
        if (commentsnumber != null) {
            stmt.bindString(5, commentsnumber);
        }
 
        String creationdate = entity.getCreationdate();
        if (creationdate != null) {
            stmt.bindString(6, creationdate);
        }
 
        String creationaddress = entity.getCreationaddress();
        if (creationaddress != null) {
            stmt.bindString(7, creationaddress);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WechatContent readEntity(Cursor cursor, int offset) {
        WechatContent entity = new WechatContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // likenumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commentsnumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // creationdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // creationaddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WechatContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSenderid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLikenumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentsnumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreationdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreationaddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WechatContent entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(WechatContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WechatContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
