package com.example.zhaoseast.wechatmoments.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.zhaoseast.wechatmoments.bean.WechatComments;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WECHAT_COMMENTS".
*/
public class WechatCommentsDao extends AbstractDao<WechatComments, String> {

    public static final String TABLENAME = "WECHAT_COMMENTS";

    /**
     * Properties of entity WechatComments.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Contentid = new Property(2, String.class, "contentid", false, "CONTENTID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Commentdate = new Property(4, String.class, "commentdate", false, "COMMENTDATE");
    }


    public WechatCommentsDao(DaoConfig config) {
        super(config);
    }
    
    public WechatCommentsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WECHAT_COMMENTS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"CONTENTID\" TEXT," + // 2: contentid
                "\"CONTENT\" TEXT," + // 3: content
                "\"COMMENTDATE\" TEXT);"); // 4: commentdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WECHAT_COMMENTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WechatComments entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String contentid = entity.getContentid();
        if (contentid != null) {
            stmt.bindString(3, contentid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String commentdate = entity.getCommentdate();
        if (commentdate != null) {
            stmt.bindString(5, commentdate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WechatComments entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String contentid = entity.getContentid();
        if (contentid != null) {
            stmt.bindString(3, contentid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String commentdate = entity.getCommentdate();
        if (commentdate != null) {
            stmt.bindString(5, commentdate);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public WechatComments readEntity(Cursor cursor, int offset) {
        WechatComments entity = new WechatComments( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contentid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // commentdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WechatComments entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContentid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(WechatComments entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(WechatComments entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WechatComments entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
